cat("After the first loop, h has ")
print(h)
# how many operation used so far
cat("So far, there are ",hash_work," operations carried out\n")
print("What are the names of the hash items")
names(h)
#looking at this, each entry in the hash has the five lowercase letters
#we can now go though the hash, and paste the lowercase letters onto the
# name of the hash items
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1          # count the number of assignments
h[LETTERS[i]] <- letters[1:5]       # set letters 1-5 to be the hash contents
# at the key locations of each value in
# the first five values in Letters
}
#What is in H right now?
cat("After the first loop, h has ")
print(h)
# how many operation used so far
cat("So far, there are ",hash_work," operations carried out\n")
print("What are the names of the hash items")
names(h)
#looking at this, each entry in the hash has the five lowercase letters
#we can now go though the hash, and paste the lowercase letters onto the
# name of the hash items
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
require('hash')
h<-hash('a'=1,'b'=2,'c'=3)
h['a']
require(hash)
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1          # count the number of assignments
h[LETTERS[i]] <- letters[1:5]       # set letters 1-5 to be the hash contents
# at the key locations of each value in
# the first five values in Letters
}
#What is in H right now?
cat("After the first loop, h has ")
print(h)
# how many operation used so far
cat("So far, there are ",hash_work," operations carried out\n")
print("What are the names of the hash items")
names(h)
#looking at this, each entry in the hash has the five lowercase letters
#we can now go though the hash, and paste the lowercase letters onto the
# name of the hash items
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
print(loop_work)
require(hash)
h <- hash()
x5 <- c()
hash_work <- 0
for(i in 1:5){
hash_work <- hash_work + 1          # count the number of assignments
h[LETTERS[i]] <- letters[1:5]       # set letters 1-5 to be the hash contents
# at the key locations of each value in
# the first five values in Letters
}
#What is in H right now?
cat("After the first loop, h has ")
print(h)
# how many operation used so far
cat("So far, there are ",hash_work," operations carried out\n")
print("What are the names of the hash items")
names(h)
#looking at this, each entry in the hash has the five lowercase letters
#we can now go though the hash, and paste the lowercase letters onto the
# name of the hash items
for(j in 1:length(h)){
hash_work <- hash_work + 1
x5 <- c(x5,paste(names(h)[j],h[[LETTERS[j]]],sep='_'))
}
print(hash_work)
# note we could have used the keys of the hash, rather than the names
# using the keys() makes more sense to me
#  x5 <- c(x5,paste(keys(h)[j],h[[LETTERS[j]]],sep='_'))
# the paste command is being used to add the contents of the hash at the key
#key value to the key value itself.   Since each key value has only one value,
# the paste function recycles the contents of names(h)[j] or keys(h)[j]
require(tictoc)
install.packages("tictoc")
knitr::opts_chunk$set(echo = TRUE)
require(tictoc)
Certainly! Here's how you can write a function reorder_name() in R using the stringr package to reorder the name from "Sheets, Dave" to "Dave Sheets":
library(stringr)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
powers_df <- function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df <- data.frame(
x = x,
x_squared = x^2,
sqrt_x = sqrt(x)
)
# Return the data frame
return(df)
}
# Example usage
x <- c(1, 3, 5, 7, 9, 11, 13)
result <- powers_df(x)
# Print the result
print(result)
relu_variant <- function(x) {
# Check the condition and return the corresponding value of y
if (x < 0) {
y <- 0.3 * x
} else {
y <- 0.5 * x
}
return(y)
}
# Example usage
result <- relu_variant(-5)
print(result)  # Output will be -1.5 (0.3 * -5)
result2 <- relu_variant(4)
print(result2)  # Output will be 2.0 (0.5 * 4)
relu_variant <- function(x) {
if (x < 0) {
return(0.3 * x)
} else {
return(0.5 * x)
}
}
# Example usage
print(relu_variant(-5))  # Output: -1.5
print(relu_variant(4))   # Output: 2.0
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}
return(power)
}
# Example usage
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
two_sum <- function(nums_vector, target) {
for (i in seq_along(nums_vector)) {
for (j in seq_along(nums_vector)) {
if (i != j && nums_vector[i] + nums_vector[j] == target) {
return(c(i-1, j-1))  # Return 0-based indices
}
}
}
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
z = two_sum(nums_vector, target)
print(z)  # Expected: c(1, 7) or c(2, 5)
two_sum <- function(nums_vector, target) {
for (i in seq_along(nums_vector)) {
for (j in seq_along(nums_vector)) {
if (i != j && nums_vector[i] + nums_vector[j] == target) {
return(c(i-1, j-1))  # Return 0-based indices
}
}
}
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
z = two_sum(nums_vector, target)
print(z)  # Expected: c(1, 7) or c(2, 5)
two_sum <- function(nums_vector, target) {
for (i in seq_along(nums_vector)) {
for (j in seq_along(nums_vector)) {
if (i != j && nums_vector[i] + nums_vector[j] == target) {
return(c(i-1, j-1))  # Return 0-based indices
}
}
}
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
z = two_sum(nums_vector, target)
print(z)  # Expected: c(1, 7) or c(2, 5)
a="Please call me at 456-123-2329, asap"
b="Hey, we have a code 234 on machine a-234-12, call me at 678-321-98766"
c="On 12-23-2022, Joe over at 122 Turnpike, dialled 912-835-4756, tell me by 9:02 pm Wed"
# Regex pattern for phone number
phone_pattern <- "\\d{3}-\\d{3}-\\d{4}"
# Extract phone numbers
phone_a <- str_extract(a, phone_pattern)
phone_b <- str_extract(b, phone_pattern)
phone_c <- str_extract(c, phone_pattern)
print(phone_a)  # Output: "456-123-2329"
print(phone_b)  # Output: "678-321-98766"
print(phone_c)  # Output: "912-835-4756"
d="jimmy.halibut@gmail.com"
e="His address is:  c.brown@hopeles.org, do write him"
f="h.potter@hogwarts.edu is bouncing back on me, I wonder why?"
# Regex pattern to extract domains
domain_pattern <- "@([a-zA-Z0-9.-]+)"
# Extract domains
domain_d <- str_extract(d, domain_pattern)
domain_e <- str_extract(e, domain_pattern)
domain_f <- str_extract(f, domain_pattern)
# Remove the "@" symbol
domain_d <- sub("@", "", domain_d)
domain_e <- sub("@", "", domain_e)
domain_f <- sub("@", "", domain_f)
print(domain_d)  # Output: "gmail.com"
print(domain_e)  # Output: "hopeles.org"
print(domain_f)  # Output: "hogwarts.edu"
library(stringr)
name_n <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
library(stringr)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the functionresult <- reorder_name(name_in)
print(result)
library(stringr)
name_i=n <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
library(stringr)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
library(stringr)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[2]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
library(stringr)
name_in <- "Sheets, Dave"
reorder_name <- function(last_first) {
# Split the input string by the comma and remove extra spaces
name_parts <- str_split(last_first, ",")[[1]]
# Clean up any leading/trailing whitespace from the names
last_name <- str_trim(name_parts[1])
first_name <- str_trim(name_parts[2])
# Return the formatted string: "First Last"
return(paste(first_name, last_name))
}
# Test the function
result <- reorder_name(name_in)
print(result)
powers_df <- function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df <- data.frame(
x = x,
x_squared = x^2,
sqrt_x = sqrt(x)
)
# Return the data frame
return(df)
}
powers_df <- function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df <- data.frame(
x = x,
x_squared = x^2,
sqrt_x = sqrt(x)
)
# Return the data frame
return(df)
}
# Example usage
x <- c(1, 3, 5, 7, 9, 11, 13)
result <- powers_df(x)
# Print the result
print(result)
library(stringr)
name_in="Sheets, Dave"
reorder_name=function(last_first) {
#Split string by the comma and remove extra spaces
name_parts=str_split(last_first, ",")[[1]]
#Clean up any leading/trailing whitespace from the names
last_name=str_trim(name_parts[1])
first_name=str_trim(name_parts[2])
return(paste(first_name, last_name))
}
result=reorder_name(name_in)
print(result)
powers_df <- function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df=data.frame(
x = x,
squared= x^2,
sqrt_x= sqrt(x)
)
return(df)
}
x <- c(1, 3, 5, 7, 9, 11, 13)
result <- powers_df(x)
print(result)
powers_df <- function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df=data.frame(
x = x,
squared= x^2,
sqrt_x= sqrt(x)
)
return(df)
}
x <- c(1, 3, 5, 7, 9, 11, 13)
result <- powers_df(x)
print(result)
relu_variant <- function(x) {
if (x < 0) {
return(0.3 * x)
} else {
return(0.5 * x)
}
}
print(relu_variant(-5))  # Output: -1.5
print(relu_variant(4))   # Output: 2.0
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}
return(power)
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}
return(power)
}
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}{
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}
return(power)
}
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
}
next_power_of_two <- function(x) {
power <- 1
while (power <= x) {
power <- power * 2
}
return(power)
}
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
two_sum <- function(nums_vector, target) {
for (i in seq_along(nums_vector)) {
for (j in seq_along(nums_vector)) {
if (i != j && nums_vector[i] + nums_vector[j] == target) {
return(c(i-1, j-1))  # Return 0-based indices
}
# Test code
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
z = two_sum(nums_vector, target)
print(z)  # Expected: c(1, 7) or c(2, 5)
two_sum <- function(nums_vector, target) {
for (i in seq_along(nums_vector)) {
for (j in seq_along(nums_vector)) {
if (i != j && nums_vector[i] + nums_vector[j] == target) {
return(c(i-1, j-1))
}
}
}
}
nums_vector <- c(5,7,12,34,6,10,8,9)
target <- 13
z = two_sum(nums_vector, target)
print(z)  # Expected: c(1, 7) or c(2, 5)
d="jimmy.halibut@gmail.com"
e="His address is:  c.brown@hopeles.org, do write him"
f="h.potter@hogwarts.edu is bouncing back on me, I wonder why?"
# Regex pattern to extract domains
domain_pattern="@([a-zA-Z0-9.-]+)"#This part i found it searching online, i will read more about it.
# Extract domains
domain_d=str_extract(d, domain_pattern)
domain_e=str_extract(e, domain_pattern)
domain_f=str_extract(f, domain_pattern)
# Remove the "@" symbol
domain_d=sub("@", "", domain_d)
domain_e=sub("@", "", domain_e)
domain_f=sub("@", "", domain_f)
print(domain_d)  # Output: "gmail.com"
print(domain_e)  # Output: "hopeles.org"
print(domain_f)  # Output: "hogwarts.edu"
next_power_of_two=function(x) {
power=1
while (power= x) {
next_power_of_two=function(x) {
power=1
while (power <= x) {
power=power * 2
}
return(power)
}
print(next_power_of_two(5))  # Output: 8
print(next_power_of_two(12)) # Output: 16
powers_df=function(x) {
# Create a data frame with columns x, x^2, and sqrt(x)
df=data.frame(
x = x,
squared= x^2,
sqrt_x= sqrt(x)
)
return(df)
}
x=c(1, 3, 5, 7, 9, 11, 13)
result=powers_df(x)
print(result)
choose.files()
choose.file()
choose.file()
choose.file()
